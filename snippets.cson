# Your snippets
#
# Atom snippets allow you to enter a simple prefix in the editor and hit tab to
# expand the prefix into a larger code block with templated values.
#
# You can create a new snippet in this file by typing "snip" and then hitting
# tab.
#
# An example CoffeeScript snippet to expand log to console.log:
#
# '.source.coffee':
#   'Console log':
#     'prefix': 'log'
#     'body': 'console.log $1'
#
# Each scope (e.g. '.source.coffee' above) can only be declared once.
#
# This file uses CoffeeScript Object Notation (CSON).
# If you are unfamiliar with CSON, you can read more about it in the
# Atom Flight Manual:
# http://flight-manual.atom.io/using-atom/sections/basic-customization/#_cson


'.source.coffee':
  'import React...':
    'prefix': 'import React'
    'body':   'import React, { Component } from "react"'

  'import React Setup...':
    'prefix': 'import React Setup'
    'body':   """
      import _                    from 'lodash'
      import React, { Component } from 'react'
      import { Meteor }           from "meteor/meteor"
      import { withRouter }       from "react-router-dom"
      import { withTracker }      from "meteor/react-meteor-data"

      $1
    """

  'import Meteor...':
    'prefix': 'import Meteor'
    'body':   'import { Meteor } from "meteor/meteor"'

  'import Lodash...':
    'prefix': 'import Lodash'
    'body':   'import _      from "lodash"'

  'import Colors...':
    'prefix': 'import Colors'
    'body':   'import Colors from "/app/imports/common/colors"'

  'import Component...':
    'prefix': 'import Component'
    'body': 'import $1 from "/app/imports/client/components/$2/$2"'

  'import collection...':
    'prefix': 'import collection'
    'body':   'import ${1:People} from "/app/imports/collections/${2:people}"'

  'import methods...':
    'prefix': 'import methods'
    'body':   'import "/app/imports/methods/${1:projects}_methods"'

  'import collection and methods...':
    'prefix': 'import collection and methods'
    'body': """
      import ${1:People} from "/app/imports/collections/${2:people}"
      import "/app/imports/methods/${2:people}_methods"
    """

  'import withTracker...':
    'prefix': 'import withTracker'
    'body':   'import { withTracker } from "meteor/react-meteor-data"'

  'import withRouter...':
    'prefix': 'import withRouter'
    'body':   'import { withRouter } from "react-router-dom"'

  'import Link...':
    'prefix': 'import Link'
    'body':   'import { Link } from "react-router-dom"'

  'export withTracker...':
    'prefix': 'export withTracker'
    'body': """
      export default (withTracker (props) ->
        ${2:return \\{\\}}
      )(${1:MyComponent})
    """
  'export withRouter...':
    'prefix': 'export withRouter'
    'body':   'export default withRouter(${1:MyComponent})'

  'export withRouter(withTracker)...':
    'prefix': 'export withRouter(withTracker)'
    'body': """
      export default withRouter(
        (withTracker (props) ->
          ${2:return \\{\\}}
        )(${1:MyComponent})
      )
    """

  'class React Component...':
    'prefix': 'class React'
    'body':   """
      import _                    from 'lodash'
      import React, { Component } from 'react'
      import { Meteor }           from "meteor/meteor"

      export default class ${1:MyComponent} extends Component
        constructor: (props) ->
          super(props)
          @state = {}

        render: ->
          ${2:<></>}
    """

  'class React Component Setup...':
    'prefix': 'class React Setup'
    'body': """
      import _                    from 'lodash'
      import React, { Component } from 'react'
      import { Meteor }           from "meteor/meteor"
      import { withRouter }       from "react-router-dom"
      import { withTracker }      from "meteor/react-meteor-data"

      class ${1:MyComponent} extends Component
        constructor: (props) ->
          super(props)
          @state = {}

        render: ->
          <div>
            $2

            <style jsx=''>{"

            "}
            </style>
          </div>

      export default withRouter((withTracker (props) ->
        {$3}
      )(${1:MyComponent}))
    """

  'style jsx...':
    'prefix': 'style jsx'
    'body':   """
      <style jsx=''>{"
        $1
        "}
      </style>
    """

  'import schema...':
    'prefix': 'import schema'
    'body':   'import SimpleSchema from "simpl-schema"'

  'import schema audit fields...':
    'prefix': 'import schema audit fields'
    'body':   """
      import SchemaAuditFields from "/app/imports/common/schema_audit_fields"
    """

  'import schema timestamps...':
    'prefix': 'import schema timestamps'
    'body':   """
      import SchemaTimestamps from "/app/imports/common/schema_timestamps"
    """

  'attach schema...':
    'prefix': 'attach schema'
    'body':   """
      ${1:Groups}.attachSchema new SimpleSchema {
        ...SchemaAuditFields
        ${2:projectId: {type: String, max: 20, index: 1}}
      }
    """

  'meteor publish...':
    'prefix': 'Meteor.publish'
    'body':   """
      Meteor.publish "${1:people.managers}", (${2:param}) ->
        $3
    """

  'meteor subscribe...':
    'prefix': 'Meteor.subscribe'
    'body':   """
      ${1:subscription = }Meteor.subscribe "${2:people.byUser}"${3:, param}
    """

  'meteor call...':
    'prefix': 'Meteor.call'
    'body':   """
      Meteor.call "${1:workspaces.insert}", ${2:data}, (err, ${3:wId}) =>
        return console.error err if err?

        $4
    """

  'div className...':
    'prefix': 'div className'
    'body':   """
      <div className="${1:my-class}">
        $2
      </div>
    """

  'span className...':
    'prefix': 'span className'
    'body':   """
      <span className="${1:my-class}"> $2 </span>
    """

  'img...':
    'prefix': 'img'
    'body':   """
      <img src="/assets/${1:user-circle.svg}"/>
    """

  'className...':
    'prefix': 'cln'
    'body':   """
      className="${1:my-class}"
    """

  'box-sizing...':
    'prefix': 'box-sizing'
    'body':   """
      box-sizing: border-box;
    """

  'insert comment...':
    'prefix': 'insert comment'
    'body':   """
      {
        # ${1: CoffeeScript comment in JSX}
        null
      }
    """

  'h1 html element...':
    'prefix': 'h1'
    'body': """
      <h1 classname="${1:my-class}">$2</h1>
    """

  'h2 html element...':
    'prefix': 'h2'
    'body': """
      <h2 classname="${1:my-class}">$2</h2>
    """

  'h3 html element...':
    'prefix': 'h3'
    'body': """
      <h3 classname="${1:my-class}">$2</h3>
    """

  'input validation':
    'prefix': 'input validation'
    'body': """
            onFocus   = {=> @resetErrors('email')}
            onBlur    = {=> @validate('email')}
            errors    = {@state.errors.email}
    """

  'validation methods':
    'prefix': 'v methods'
    'body': """
      validate: (field) =>
        data =
          email:    @state.email
          password: @state.password

        if field
          delete @state.errors[field]
          options = {keys: [field]}
        else
          @state.errors = {}
          options = {keys: ['title']}

        if !field || @state[field]
          validator = UserSchema.simpleSchema().newContext()
          validator.validate validator.clean(data, {mutate: true}), options

          validator.validationErrors().forEach (error) =>
            (@state.errors[error.name] ||= []).push(validator.keyErrorMessage(error.name) + '.')

        @setState {errors: @state.errors}

        if _.isEmpty(@state.errors) then data else false

      resetErrors: (field) =>
        delete @state.errors[field]
        @setState {errors: @state.errors}
    """
